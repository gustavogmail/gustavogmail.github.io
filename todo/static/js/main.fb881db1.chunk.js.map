{"version":3,"sources":["components/todo-form.tsx","components/todo-item.tsx","components/todo-list.tsx","index.tsx"],"names":["TodoForm","props","inputRef","React","formState","setFormState","className","id","ref","type","placeholder","onChange","event","target","value","handleInputChange","onKeyPress","key","newTodo","shortid","generate","text","isCompleted","handleTodoCreate","current","handleInputEnter","TodoItem","onClick","handleTodoComplete","todo","onBlur","handleTodoBlur","handleTodoUpdate","handleTodoRemove","TodoList","todos","map","TodoListApp","setTodos","newTodosState","push","find","filter","length","classList","add","remove","rootElement","document","getElementById","render"],"mappings":"uNAwDeA,EAhDE,SAACC,GAEhB,IAAMC,EAAWC,SAA+B,MAGhD,EAAkCA,WAAe,IAAjD,mBAAOC,EAAP,KAAkBC,EAAlB,KA6BA,OACE,uBAAKC,UAAU,aACb,yBACEC,GAAG,UACHC,IAAKN,EACLO,KAAK,OACLC,YAAY,iBACZC,SAAU,SAAAC,GAAK,OAjCrB,SAA2BA,GAEzBP,EAAaO,EAAMC,OAAOC,OA+BHC,CAAkBH,IACrCI,WAAY,SAAAJ,GAAK,OA5BvB,SAA0BA,GAExB,GAAkB,UAAdA,EAAMK,IAAiB,CAEzB,IAAMC,EAAyB,CAC7BX,GAAIY,IAAQC,WACZC,KAAMjB,EACNkB,aAAa,GAIfrB,EAAMsB,iBAAiBL,GAGnBhB,GAAYA,EAASsB,UACvBtB,EAASsB,QAAQV,MAAQ,KAaJW,CAAiBb,QChB/Bc,EA3BE,SAACzB,GAChB,OACE,uBAAKK,UAAU,aACb,uBAAKA,UAAU,UAAUqB,QAAS,kBAAM1B,EAAM2B,mBAAmB3B,EAAM4B,KAAKtB,MACzEN,EAAM4B,KAAKP,YACV,wBAAMhB,UAAU,qBAAhB,UAEA,wBAAMA,UAAU,yBAIpB,uBAAKA,UAAU,2BACb,yBACEA,UAAU,gBACVQ,MAAOb,EAAM4B,KAAKR,KAClBS,OAAQ7B,EAAM8B,eACdpB,SAAU,SAACC,GAAD,OAAgDX,EAAM+B,iBAAiBpB,EAAOX,EAAM4B,KAAKtB,QAIvG,uBAAKD,UAAU,cAAcqB,QAAS,kBAAM1B,EAAMgC,iBAAiBhC,EAAM4B,KAAKtB,MAA9E,YCGS2B,EApBE,SAACjC,GAChB,OACE,uBAAKK,UAAU,aACb,0BACGL,EAAMkC,MAAMC,KAAI,SAACP,GAAD,OACf,sBAAIZ,IAAKY,EAAKtB,IACZ,gBAAC,EAAD,CACEsB,KAAMA,EACNG,iBAAkB/B,EAAM+B,iBACxBC,iBAAkBhC,EAAMgC,iBACxBL,mBAAoB3B,EAAM2B,mBAC1BG,eAAgB9B,EAAM8B,wBCN9BM,G,MAAc,WAClB,MAA0BlC,WAAgC,IAA1D,mBAAOgC,EAAP,KAAcG,EAAd,KAwDA,OACE,uBAAKhC,UAAU,iBACb,gBAAC,EAAD,CACE6B,MAAOA,EACPZ,iBAzDN,SAA0BM,GAExB,IAAMU,EAA8B,YAAOJ,GAG3CI,EAAcC,KAAKX,GAGnBS,EAASC,MAoDP,gBAAC,EAAD,CACEJ,MAAOA,EACPH,iBAlDN,SAA0BpB,EAA4CL,GAEpE,IAAMgC,EAA8B,YAAOJ,GAG3CI,EAAcE,MAAK,SAACZ,GAAD,OAAyBA,EAAKtB,KAAOA,KAAKc,KAAOT,EAAMC,OAAOC,MAGjFwB,EAASC,IA2CLN,iBAvCN,SAA0B1B,GAExB,IAAMgC,EAAiCJ,EAAMO,QAAO,SAACb,GAAD,OAAyBA,EAAKtB,KAAOA,KAGzF+B,EAASC,IAmCLX,mBA/BN,SAA4BrB,GAE1B,IAAMgC,EAA8B,YAAOJ,GAG3CI,EAAcE,MAAK,SAACZ,GAAD,OAAyBA,EAAKtB,KAAOA,KAAKe,aAAeiB,EAAcE,MAAK,SAACZ,GAAD,OAAyBA,EAAKtB,KAAOA,KAAKe,YAGzIgB,EAASC,IAwBLR,eApBN,SAAwBnB,GACY,IAA9BA,EAAMC,OAAOC,MAAM6B,OACrB/B,EAAMC,OAAO+B,UAAUC,IAAI,oBAE3BjC,EAAMC,OAAO+B,UAAUE,OAAO,0BAsB9BC,EAAcC,SAASC,eAAe,QAC5CC,iBAAO,gBAAC,EAAD,MAAiBH,I","file":"static/js/main.fb881db1.chunk.js","sourcesContent":["// Import dependencies\r\nimport * as React from 'react'\r\nimport shortid from 'shortid'\r\n\r\n// Import interfaces\r\nimport {TodoInterface, TodoFormInterface} from './../interfaces'\r\n\r\n// Todo form component\r\nconst TodoForm = (props: TodoFormInterface) => {\r\n  // Create ref for form input\r\n  const inputRef = React.useRef<HTMLInputElement>(null)\r\n\r\n  // Create new form state\r\n  const [formState, setFormState] = React.useState('')\r\n\r\n  // Handle todo input change\r\n  function handleInputChange(event: React.ChangeEvent<HTMLInputElement>) {\r\n    // Update form state with the text from input\r\n    setFormState(event.target.value)\r\n  }\r\n\r\n  // Handle 'Enter' in todo input\r\n  function handleInputEnter(event: React.KeyboardEvent) {\r\n    // Check for 'Enter' key\r\n    if (event.key === 'Enter') {\r\n      // Prepare new todo object\r\n      const newTodo: TodoInterface = {\r\n        id: shortid.generate(),\r\n        text: formState,\r\n        isCompleted: false\r\n      }\r\n\r\n      // Create new todo item\r\n      props.handleTodoCreate(newTodo)\r\n\r\n      // Reset the input field\r\n      if (inputRef && inputRef.current) {\r\n        inputRef.current.value = ''\r\n      }\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div className=\"todo-form\">\r\n      <input\r\n        id=\"newTodo\"\r\n        ref={inputRef}\r\n        type=\"text\"\r\n        placeholder='Enter new todo'\r\n        onChange={event => handleInputChange(event)}\r\n        onKeyPress={event => handleInputEnter(event)}\r\n      />\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default TodoForm\r\n","// Import dependencies\r\nimport * as React from 'react'\r\n\r\n// Import interfaces\r\nimport { TodoItemInterface } from './../interfaces'\r\n\r\n// TodoItem component\r\nconst TodoItem = (props: TodoItemInterface) => {\r\n  return (\r\n    <div className='todo-item'>\r\n      <div className='checker' onClick={() => props.handleTodoComplete(props.todo.id)}>\r\n        {props.todo.isCompleted ? (\r\n          <span className=\"todo-item-checked\">&#x2714;</span>\r\n        ) : (\r\n          <span className=\"todo-item-unchecked\" />\r\n        )}\r\n      </div>\r\n\r\n      <div className=\"todo-item-input-wrapper\">\r\n        <input\r\n          className='todoItemInput'\r\n          value={props.todo.text}\r\n          onBlur={props.handleTodoBlur}\r\n          onChange={(event: React.ChangeEvent<HTMLInputElement>) => props.handleTodoUpdate(event, props.todo.id)}\r\n        />\r\n      </div>\r\n\r\n      <div className=\"item-remove\" onClick={() => props.handleTodoRemove(props.todo.id)}>\r\n        &#x02A2F;\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default TodoItem\r\n","// Import dependencies\r\nimport * as React from 'react'\r\n\r\n// Import TodoItem\r\nimport TodoItem from './todo-item'\r\n\r\n// Import interfaces\r\nimport { TodoListInterface } from './../interfaces'\r\n\r\n// TodoList component\r\nconst TodoList = (props: TodoListInterface) => {\r\n  return (\r\n    <div className=\"todo-list\">\r\n      <ul>\r\n        {props.todos.map((todo) => (\r\n          <li key={todo.id}>\r\n            <TodoItem\r\n              todo={todo}\r\n              handleTodoUpdate={props.handleTodoUpdate}\r\n              handleTodoRemove={props.handleTodoRemove}\r\n              handleTodoComplete={props.handleTodoComplete}\r\n              handleTodoBlur={props.handleTodoBlur}\r\n            />\r\n          </li>\r\n        ))}\r\n      </ul>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default TodoList\r\n","// Import dependencies\r\nimport * as React from 'react'\r\nimport { render } from 'react-dom'\r\n\r\n// Import components\r\nimport TodoForm from './components/todo-form'\r\nimport TodoList from './components/todo-list'\r\n\r\n// Import interfaces\r\nimport { TodoInterface } from './interfaces'\r\n\r\n// Import styles\r\nimport './styles/styles.css'\r\n\r\n// TodoListApp component\r\nconst TodoListApp = () => {\r\n  const [todos, setTodos] = React.useState<TodoInterface[]>([])\r\n\r\n  // Creating new todo item\r\n  function handleTodoCreate(todo: TodoInterface) {\r\n    // Prepare new todos state\r\n    const newTodosState: TodoInterface[] = [...todos]\r\n\r\n    // Update new todos state\r\n    newTodosState.push(todo)\r\n\r\n    // Update todos state\r\n    setTodos(newTodosState)\r\n  }\r\n\r\n  // Update existing todo item\r\n  function handleTodoUpdate(event: React.ChangeEvent<HTMLInputElement>, id: string) {\r\n    // Prepare new todos state\r\n    const newTodosState: TodoInterface[] = [...todos]\r\n\r\n    // Find correct todo item to update\r\n    newTodosState.find((todo: TodoInterface) => todo.id === id)!.text = event.target.value\r\n\r\n    // Update todos state\r\n    setTodos(newTodosState)\r\n  }\r\n\r\n  // Remove existing todo item\r\n  function handleTodoRemove(id: string) {\r\n    // Prepare new todos state\r\n    const newTodosState: TodoInterface[] = todos.filter((todo: TodoInterface) => todo.id !== id)\r\n\r\n    // Update todos state\r\n    setTodos(newTodosState)\r\n  }\r\n\r\n  // Check existing todo item as completed\r\n  function handleTodoComplete(id: string) {\r\n    // Copy current todos state\r\n    const newTodosState: TodoInterface[] = [...todos]\r\n\r\n    // Find the correct todo item and update its 'isCompleted' key\r\n    newTodosState.find((todo: TodoInterface) => todo.id === id)!.isCompleted = !newTodosState.find((todo: TodoInterface) => todo.id === id)!.isCompleted\r\n\r\n    // Update todos state\r\n    setTodos(newTodosState)\r\n  }\r\n\r\n  // Check if todo item has title\r\n  function handleTodoBlur(event: React.ChangeEvent<HTMLInputElement>) {\r\n    if (event.target.value.length === 0) {\r\n      event.target.classList.add('todo-input-error')\r\n    } else {\r\n      event.target.classList.remove('todo-input-error')\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div className=\"todo-list-app\">\r\n      <TodoForm\r\n        todos={todos}\r\n        handleTodoCreate={handleTodoCreate}\r\n      />\r\n\r\n      <TodoList\r\n        todos={todos}\r\n        handleTodoUpdate={handleTodoUpdate}\r\n        handleTodoRemove={handleTodoRemove}\r\n        handleTodoComplete={handleTodoComplete}\r\n        handleTodoBlur={handleTodoBlur}\r\n      />\r\n    </div>\r\n  )\r\n}\r\n\r\nconst rootElement = document.getElementById('root')\r\nrender(<TodoListApp />, rootElement)\r\n"],"sourceRoot":""}